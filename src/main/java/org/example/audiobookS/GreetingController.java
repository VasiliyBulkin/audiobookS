package org.example.audiobookS;

import org.example.audiobookS.domain.Author;
import org.example.audiobookS.repos.AuthorRepo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.List;
import java.util.Map;

@Controller//annotation for controller
public class GreetingController {//controller fo greeting
    @Autowired// This means to get the bean called Author
    // Which is auto-generated by Spring, we will use it to handle the data
    private AuthorRepo authorRepo;

    @GetMapping("/greeting")//The @GetMapping annotation ensures that HTTP GET requests to /greeting are mapped to the greeting() method.
    public String greeting(//@RequestParam binds the value of the query string parameter name into the name
            @RequestParam(name="name", required=false, defaultValue="World") String name, Map<String, Object> model) {
        model.put("name", name);//put the name - name
        return "greeting";//return this VIEW file name from folder templates
    }

    @GetMapping("main")
    public String main(Map<String ,Object> model){
        Iterable<Author> authors = authorRepo.findAll();
        model.put("authors", authors);
        return "main";
    }

    @PostMapping("main")
    public  String add (@RequestParam String name, Map<String, Object> model){
      Author author =  new Author(name);
      authorRepo.save(author);
      Iterable<Author> authors = authorRepo.findAll();
      model.put("authors", authors);
      return "main";
    }

    @PostMapping("filter")
    public String filter(@RequestParam String filter, Map<String, Object> model) {
        Iterable<Author> authors;
        if (filter !=null && !filter.isEmpty()){
            authors = authorRepo.findByNameContaining(filter);
        } else {
            authors = authorRepo.findAll();
        }
       model.put("authors", authors);
        return "main";
    }

}