package org.example.audiobookS.controller;

import org.example.audiobookS.domain.Book;
import org.example.audiobookS.domain.User;
import org.example.audiobookS.repos.BookRepo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.IOException;
import java.util.Map;
import java.util.UUID;

@Controller//annotation for controller
public class MainController {//controller fo greeting
    @Autowired// This means to get the bean called Author
    // Which is auto-generated by Spring, we will use it to handle the data
    private BookRepo bookRepo;

    @Value("${upload.path}")// @Value позволяет внедрять прос- тые значения таких типов, как int, boolean и String.
    private String uploadPath;


    @GetMapping("/")//The @GetMapping annotation ensures that HTTP GET requests to /greeting are mapped to the greeting() method.
    public String greeting(Map<String, Object> model) {
        return "greeting";//return this VIEW file name from folder templates
    }

    @GetMapping("/main")
    public String main(@RequestParam(required = false, defaultValue = "") String filter, Model model){
        Iterable<Book> books = bookRepo.findAll();
        if (filter !=null && !filter.isEmpty()){
            books = bookRepo.findByNameContaining(filter);
        } else {
            books = bookRepo.findAll();
        }
        model.addAttribute("books", books);
        model.addAttribute("filter", filter);
        return "main";
    }

    @PostMapping("/main")
    public  String add (
            @AuthenticationPrincipal User owner,
            @RequestParam String name, Map<String, Object> model,
            @RequestParam("file") MultipartFile file
    ) throws IOException {
      Book book =  new Book(name,owner);

      if (file != null && !file.getOriginalFilename().isEmpty()){//проверяем есть ли файл не равный null
          File uploadDir = new File(uploadPath);

                if(!uploadDir.exists()){//если директория не существует - создаем ее
                    uploadDir.mkdir();
                }
          String uuidFile = UUID.randomUUID().toString();
          String resultFilename = uuidFile + "." + file.getOriginalFilename();

         file.transferTo(new File(uploadPath + "/" + resultFilename));


          book.setFilename(resultFilename);
      }

      bookRepo.save(book);
      Iterable<Book> books = bookRepo.findAll();
      model.put("books", books);
      return "main";
    }

}